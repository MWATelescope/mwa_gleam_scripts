#!/bin/bash

ra=TARGETRA
dec=TARGETDEC
xsize=XSIZE
ysize=YSIZE
chan=CHAN
date=DATE
datadir=DATADIR
proj=PROJ
solobs=SOLOBS
bkgthresh=BKGTHRESH
filelist=FILELIST
redorms=True

if [[ ! $PBS_ARRAY_INDEX ]]
then
    PBS_ARRAY_INDEX=$SLURM_ARRAY_TASK_ID
fi

# float number comparison
function fcomp() {
    awk -v n1=$1 -v n2=$2 'BEGIN{ if (n1<n2) exit 0; exit 1}'
}

#if [[ $ra && $dec ]]
#then
#    postring="--ra=$ra --dec=$dec"
#fi

# Harder to match MRC further north since it runs out at +20
if [[ $dec == "18.6" || $dec == "+18.6"  || $dec == "19" || $dec == "+19" ]]
then
    extraxm=True
    MRCtarget=25
else
    MRCtarget=75
fi


#if [[ ! $xsize || ! $ysize ]]
#then
#    xsize=0
#    ysize=0
#fi

if [[ $chan -eq 69 ]]
then
    rmscutoff=1.0
elif [[ $chan -eq 93 ]]
then
    rmscutoff=0.24
else
    rmscutoff=0.2
fi

# For Dec-72 scans, blank out the larger HAs to reduce ionospheric blurring
if [[ $date == "20131112" || $date == "20130818" || $date == "20140309" ||  $date == "20140614" ]]
then
    docrop="True"
else
# Same for the lowest frequency of Dec -55
    if [[ $chan -eq 69 ]]
    then
        if [[ $date == "20131108" || $date == "20130809" || $date == "20140317" ||  $date == "20140612" ]]
        then
            docrop="True"
        fi
    fi
fi

cd $datadir/$proj/$date/$chan

Xfile=`sed "${PBS_ARRAY_INDEX}q;d" $filelist`
cd `dirname $Xfile`

if [[ ! -d unused ]]
then
    mkdir unused
else
    mv unused/${obsid}*_I_* ./
fi

Xfile=`basename $Xfile`
obsid=`echo $Xfile | awk 'BEGIN {FS="_"} {print $1}'`

echo "Processing $Xfile from week $date, channel $chan."

# Use the corrections from another observation if within 15 deg of the Galactic plane
# Also, don't worry about matching enough MRC sources, because the GP will dominate
testfile=`ls ${obsid}*v2.?.fits | head -1`
RA=`pyhead.py -p CRVAL1 $testfile | awk '{print $3}'`
b=`fk5_to_gal.py $RA $dec | awk '{printf("%d",$2)}' | sed "s/-//"`
if [[ $b -lt 15 ]]
then
    MRCtarget=0
fi
# HACK : turn off fluxscaling modification for the old mosaicking
b=20

Yfile=`echo $Xfile | sed "s/XX/YY/g"`
Ifile=`echo $Xfile | sed "s/XX/I/g"`
if [[ ! -e $Yfile ]] || [[ ! -e $Xfile ]]
then
    echo "Either $Xfile or $Yfile is missing. Moving to unused/"
    mv $Xfile unused/
    mv $Yfile unused/
    exit 0
fi

# First check image size; if it's unusual, crop it and save an old uncropped version
xaxis=`pyhead.py -p NAXIS1 $Xfile | awk '{print $3}'`
if [[ $xaxis -ne 4000 ]]
then
    echo "$Xfile is not a standard size: $xaxis pixels across instead of 4000."
    echo "Cropping $Xfile and associated YY and I files to match the standard size."
    rstart=`expr \( $xaxis - 4000 \) / 2`
    rend=`expr $xaxis - $rstart - 1`
    for file in $Xfile $Yfile $Ifile
    do
        fullsize=`echo $file | sed "s/.fits/_full.fits/"`
        if [[ ! -e $fullsize ]]
        then
            $aprunsingle getfits -o ${obsid}temp.fits $file $rstart-$rend $rstart-$rend
            $aprunsingle unflatten.py ${obsid}temp.fits
            mv $file unused/$fullsize
            mv ${obsid}temp.fits $file
        else
            echo "$file already cropped to 4000 pixels."
        fi
    done
fi

# Make primary-beam-corrected XX and YY images in order to measure correction w.r.t. MRC
delays=`pyhead.py -p DELAYS $Xfile | awk '{print $3}' | sed "s/\[//" | sed "s/\]//"`
freq=`echo $Xfile | awk 'BEGIN {FS="_"} {print $2}'`
dec=`get_central_dec.py -f $Xfile --round`
# Check for the existence of the primary beams
if [[ ! -d ../../../pbeams ]]
then
    mkdir ../../../pbeams
fi
if [[ ! -d ../../../pbeams/Dec${dec} ]]
then
    mkdir ../../../pbeams/Dec${dec}
fi

# Generate the primary beam, if it doesn't already exist
if [[ ! -e ../../../pbeams/Dec${dec}/beam_${freq}_XX.fits ]]
then
    $aprun make_beam.py -d $delays -f $Xfile
    Xb=`echo $Xfile | sed "s/.fits/_beamXX.fits/"`
    Yb=`echo $Xfile | sed "s/.fits/_beamYY.fits/"`
    mv $Xb ../../../pbeams/Dec${dec}/beam_${freq}_XX.fits
    mv $Yb ../../../pbeams/Dec${dec}/beam_${freq}_YY.fits
fi
# Use the standard sized beam to correct the image
Xcorr=`echo $Xfile | sed "s/.fits/_pb.fits/"`
Yfile=`echo $Xfile | sed "s/XX/YY/"`
Ycorr=`echo $Yfile | sed "s/.fits/_pb.fits/"`
if [[ ! -e $Xcorr ]]
then
    $aprunsingle pb_correct.py --input $Xfile --output $Xcorr --beam ../../../pbeams/Dec${dec}/beam_${freq}_XX.fits
fi
if [[ ! -e $Ycorr ]]
then
    $aprunsingle pb_correct.py --input $Yfile --output $Ycorr --beam ../../../pbeams/Dec${dec}/beam_${freq}_YY.fits
fi

# Source-finding on the I and pb-corrected XX and YY snapshots
# We can use cheap backgrounding since we only need bright source fluxes
snaplist=`ls ${obsid}*_I_*v2.?.fits ${obsid}*_??_*v2.?_pb.fits*`

for file in $snaplist
do
    vot=`echo $file | sed "s/.fits/_comp.vot/"`
    root=`echo $file | sed "s/.fits//"`
    if [[ ! -e $vot ]]
    then
        echo "Source-finding on $file."
        MIMAS -o ${obsid}_fov.mim +c $RA $dec 40
        MIMAS -o ${obsid}_nogal.mim +r ${obsid}_fov.mim -r $MWA_CODE_BASE/MWA_Tools/gleam_scripts/catalogue/gp.mim
        $aprun BANE --noclobber --compress $file
        $aprun aegean --region=${obsid}_nogal.mim --cores=${ncpus} --seedclip=8 --island --maxsummits=5 --autoload --out=/dev/null --table=$root.vot,$root.reg $file
    else
        echo "Source-finding has already been performed on $file."
    fi
# Had to write this check for a SINGLE edge case in 10,000s of observations checked so far!!
    obsid=`echo $file | awk 'BEGIN {FS="_"} {print $1}'`
    if [[ ! -e $vot ]]
    then
        echo "$file didn't source-find correctly! Moving all files associated with $obsid to unused and terminating QA for this snapshot."
        mv ${obsid}* unused/
        exit 0
    else
        if [[ $b -gt 15 ]]
        then
    # Check how many sources were in the file
            nmatch=`grep "<TR>" $vot | wc -l`
            if [[ $nmatch -lt $MRCtarget ]]
            then
                echo "$file did not have enough sources. Moving all files associated with $obsid to unused and terminating QA for this snapshot."
                mv ${obsid}* unused/
                exit 0
            fi
        fi
    fi
done

# For GP images, check the background to make sure multiscale went ok
if [[ $b -lt 15 ]]
then
    snaplist=`ls ${obsid}*_??_*v2.?_pb.fits*`
    for file in $snaplist
    do
        bkg=`echo $file | sed "s/.fits/_bkg.fits/"`
# Background images are compressed so we only need to use a tiny box to get quite a big area
        min=`rms_measure.py --min --middle --boxsize=40 -f $bkg`
        orifile=`echo $file | sed "s/_pb//"`
        rms=`rms_measure.py --corners --boxsize=200 -f $orifile`
        snr=`echo "100 * $min / $rms" | bc -l | awk '{printf "%d",$1}' | sed "s/-//"`
        if [[ $snr -gt $bkgthresh ]]
        then
            killobs=True
        fi
    done
fi
       
if [[ $killobs == "True" ]]
then
    echo "An image from $obsid had too negative a background: moving to unused and terminating QA for this snapshot."
    mv ${obsid}* unused/
    exit 0
fi

# MRC flux scaling

ncorr=`ls ${obsid}*_fluxscaled.fits | wc -l | awk '{print $1}'`
if [[ $ncorr -lt 3 ]]
then
    if [[ $b -le 15 ]]
    then
        fluxcorrs=${solobs}_flux_corrections.txt
        $aprunsingle xmatch_mrc.py --input=$obsid
        if [[ ! -e $fluxcorrs ]]
        then
            echo "Couldn't find flux corrections derived from ${solobs}! Please check what went wrong. Terminating QA (and also mosaicking)."
            exit 1
        else
            for file in ${obsid}*_v2.?.fits
            do
                solutionfile=`echo $file | sed "s/${obsid}/${solobs}/"`
                corr=`grep $solutionfile $fluxcorrs | awk '{print $2}'`
                corrected=`echo $file | sed "s/.fits/_fluxscaled.fits/"`
                $aprunsingle rescale_image.py --mosaic=$file --factor=$corr --output=$corrected
                if [[ ! -e $corrected ]]
                then
                    echo "Failed to create $corrected from $file using $fluxcorrs, attempting scaling factor of $corr."
                else
                    echo "Created $corrected from $file using scaling factor of $corr."
                fi
            done
        fi
    else
        echo "Running MRC-based flux correction on $obsid."
        $aprunsingle correct_mrc_flux.py --input=$obsid
    fi
elif [[ $ncorr -eq 3 ]]
then
    echo "$obsid has already been corrected to MRC flux scale."
else
    echo "$obsid has $ncorr corrected files -- that's a bit weird!"
    exit 1
fi

ncorr=`ls ${obsid}*_fluxscaled.fits | wc -l | awk '{print $1}'`
if [[ $ncorr -lt 3 ]]
then
    echo "Could not correct all images for $obsid to MRC flux scale. Moving files to unused/ and exiting."
    mv ${obsid}* unused/
    exit 0
fi

# Warp the images for the astrometric corrections

ncorr=`ls ${obsid}*_corrected.fits | wc -l | awk '{print $1}'`

if [[ $ncorr -lt 3 ]]
then
    if ls ${obsid}*MHz_I_r*_v2.?_MRC.vot 1>> /dev/null 2>> /dev/null
    then
        MRC=`ls ${obsid}*MHz_I_r*_v2.?_MRC.vot | head -1`
    else
        MRC=`ls unused/${obsid}*MHz_I_r*_v2.?_MRC.vot | head -1`
    fi
# For Dec +18, I replace the input catalogue with a VLSSr/NVSS hybrid
    echo "Running fits warping script on $obsid."
    $aprunsingle fits_warp.py --plot --xm $MRC --infits "${obsid}*MHz_*_r*_v2.?_fluxscaled.fits" --suffix corrected --ra1 ra --dec1 dec --ra2 _RAJ2000 --dec2 _DEJ2000
    for file in ${obsid}*MHz_*_r*_v2.?_fluxscaled_corrected.fits
    do
        newfile=`echo $file | sed "s/fluxscaled_corrected/corrected/"`
        $aprunsingle unflatten.py $file
        mv $file $newfile
    done
elif [[ $ncorr -eq 3 ]]
then
    echo "$obsid has already been astrometrically warped."
else
    echo "$obsid has $ncorr corrected files -- that's a bit weird!"
    exit 1
fi

Xfile=`echo $Xfile | sed "s/.fits/_corrected.fits/"`
Yfile=`echo $Xfile | sed "s/XX/YY/g"`
if [[ ! -e $Yfile ]] || [[ ! -e $Xfile ]]
then
    echo "Either $Xfile or $Yfile is missing. Moving all files associated with $obsid to unused and terminating QA for this snapshot."
    mv ${obsid}* unused/
    exit 0
fi

# Rediscovering the IMAGERMS is optional, because Galaxy takes SO long to do this!
if [[ $redorms != "" ]]
then
    snaplist=`ls $obsid*_??_*v2.?_corrected.fits*`
    # Generate image RMS for XX and YY corrected images
    for file in $snaplist
    do
    # Restore unblanked images first
        if [[ $docrop == "True" ]]
        then
            unblanked=`echo $file | sed "s/corrected/unblanked/"`
            if [[ -e $unblanked ]]
            then
                mv $unblanked $file
            fi
        fi
    #    imagerms=`pyhead.py -p IMAGERMS $file | awk '{print $3}'`
    # Use previously made RMS maps
        rmsmap=`ls ${file:0:23}*_rms.fits | head -1`
        imagerms=`$aprunsingle rms_measure.py --middle --mean --file $rmsmap`
    # Multiply by flux rescaling factor for most accurate RMS
        if [[ $b -le 15 ]]
        then
            fluxcorrs=${solobs}_flux_corrections.txt
        else
            fluxcorrs=${obsid}_flux_corrections.txt
        fi
        resc=`grep ${file:11:12} $fluxcorrs | awk '{print $2}'`
        imagerms=`echo "$imagerms * $resc" | bc -l`
        $aprunsingle pyhead.py -u IMAGERMS $imagerms $file
        # If the pointing is Dec -72, flag out the SCP
        if [[ $docrop == "True" ]]
        then
            echo "Low Dec observation: blanking edges of $file"
            temp=`echo $file | sed "s/corrected/temp/"`
            $aprunsingle blank_SCP.py --filename=$file -o $temp
            mv $file $unblanked
            mv $temp $file
        fi
    done
else
    echo "IMAGERMS already set for $obsid."
fi

mv ${obsid}*_I_* unused/

echo "Ending QA for $obsid."

## Start the enormous QA process! -- NB: this needs updating/replacing
#    for file in $obsid*2.?.fits
#    do
#        echo $file
## Fix DATE-OBS bug
#        datestr=`pyhead.py -p DATE-OBS $file | awk '{print $3}'`
#        minutes=`echo $datestr | awk 'BEGIN {FS=":"} {print $2}'` 
#        if [[ $minutes -eq 60 ]]
#        then
#            hrs=`echo $datestr | awk 'BEGIN {FS="T"} {print $2}' | awk 'BEGIN {FS=":"} {print $1}'` 
#            ((hrs+=1)) 
#            startstr=`echo $datestr | awk 'BEGIN {FS="T"} {print $1}'`
#            endstr=`echo $datestr | awk 'BEGIN {FS=":"} {print $3}'`
#            newdatestr="${startstr}T${hrs}:00:${endstr}" 
#            pyhead.py -u DATE-OBS $newdatestr $file
#        fi 
#        corfile=`echo $file | sed "s/.fits/_corrected.fits/g"`
## If the corrected file already exists, assume that the QA worked the first time
#        if [[ ! -e $corfile ]]
#        then
#            pol=`echo $file | awk 'BEGIN {FS="_"} {print $3}'`
#            if [[ $pol == "XX" ]]
#            then
#                altfile=`echo $file | sed "s/XX/YY/g"`
#            else
#                altfile=`echo $file | sed "s/YY/XX/g"`
#            fi
#            if [[ ! -e $altfile && ! -e unused/$altfile ]]
#            then
#                echo "$file has no opposite pol!"
#                mv $file unused/
#            else
#   # discard images with the wrong pixel scale
#                cdel=`pyhead.py -p CDELT2 $file | awk '{printf("%0.8f\n",$3)}' | awk '{print substr($1,0,9)}'`
#                scale=`echo "1.1 / $chan" | bc -l | awk '{printf("%0.8f\n",$1)}' | awk '{print substr($1,0,9)}'`
#                if fcomp $scale $cdel
#                then
#                    echo "$file has the wrong pixel scale ($cdel instead of ${scale})! Trying to find another version." | tee -a checkpoint.log
#                    wget --quiet -O $file  http://store04.icrar.org:7777/RETRIEVE?file_id=$file\&file_version=1
#                    wget --quiet -O $altfile  http://store04.icrar.org:7777/RETRIEVE?file_id=$altfile\&file_version=1
#                fi
#                cdel=`pyhead.py -p CDELT2 $file | awk '{printf("%0.8f\n",$3)}' | awk '{print substr($1,0,9)}'`
#                scale=`echo "1.1 / $chan" | bc -l | awk '{printf("%0.8f\n",$1)}' | awk '{print substr($1,0,9)}'`
#                if fcomp $scale $cdel
#                then
#                    echo "$file still has the wrong pixel scale! Giving up and moving on." | tee -a checkpoint.log
#                    mv $file unused/
#                    mv $altfile unused/
#                else
#                    echo "$file pixel scale is fine." | tee -a checkpoint.log
#        # File sometimes gone by this point -- double check it's still there
#                    if [[ -e $file ]]
#                    then
#        # crop extra-large images
#                        xaxis=`pyhead.py -p NAXIS1 $file | awk '{print $3}'`
#                        if [[ $xaxis -ne 4000 ]]
#                        then
#                            echo "$file is not a standard size: $xaxis pixels across instead of 4000." | tee -a checkpoint.log
#                            echo "Cropping $file to match the standard size." | tee -a checkpoint.log
#                            rstart=`expr \( $xaxis - 4000 \) / 2`
#                            rend=`expr $xaxis - $rstart - 1`
#                            $aprunsingle getfits -o temp.fits $file $rstart-$rend $rstart-$rend
#                            $aprunsingle unflatten.py temp.fits
#                            mv $file unused/
#                            mv temp.fits $file
#                        fi
#                    fi
#                fi
#            fi
#        fi
#    done

